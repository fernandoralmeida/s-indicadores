@page "/setores"
@model Setores.IndexModel
@{
    Layout = "_LayoutMap";
    ViewData["Title"] = "Densidade Setorial do Estado de SP";
    ViewData["ActivePage"] = Shared.NavPages.MapSetores;
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<div class="div-topbar">
    <div id="div-menu">
        <partial name="_Navmap" />
    </div>
    <span class="div-result" id="span_result">?</span>
</div>

<div id="cnae-container">
    <a href="#" data-target="mobile-demo" class="sidenav-trigger"><i class="material-icons">menu</i></a>
    <ul class="collapsible margin-0 hide-on-med-and-down">
        <form method="post" asp-page-handler="DCnae">
            <div class="div-search-cnae valign-wrapper">
                <i class="material-icons margin-l-10 grey-text">search</i>
                <input class="input-search-cnae browser-default" type="search" asp-for="Search" placeholder="CNAE ex: 15 ou 1531901">
            </div>
        </form>
        @foreach (var setor in Model.Setore_Segmentos_Cnaes!)
        {
            <li>
                <div class="collapsible-header"><i class="material-icons">place</i>@setor.Key</div>
                <div class="collapsible-body padding-10">
                    <ul class="collapsible margin-0">
                        @foreach (var segmento in setor.Value)
                        {
                            <li>
                                <div class="collapsible-header" title="CNAE Grupo: @segmento.Key[..2]">
                                    @segmento.Key.Remove(0, 2)
                                </div>
                                <div class="collapsible-body padding-10">
                                    <div class="row center padding-b-10">
                                        <a class="segmento_click btn-link"
                                            data-segmento="@segmento.Key[..2]" data-descricao="@segmento.Key.Remove(0, 2)" title="CNAE Grupo: @segmento.Key[..2]">VER
                                            SEGMENTO @segmento.Key.Remove(0, 2)</a>
                                    </div>
                                    @foreach (var cnae in segmento.Value)
                                    {
                                        <p><a class="cnae_click" data-cnae="@cnae[..7]" data-descricao="@cnae.Remove(0, 7)" title="CNAE @cnae[..7]">@cnae.Remove(0, 7)</a></p>
                                        <div class="divider"></div>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
    </ul>
</div>

<ul class="sidenav collapsible" id="mobile-demo">
        <form method="post" asp-page-handler="MCnae">
            <div class="div-search-cnae valign-wrapper">
                <i class="material-icons margin-l-10 grey-text">search</i>
                <input class="input-search-cnae browser-default" type="search" asp-for="Search" placeholder="CNAE ex: 15 ou 1531901">
            </div>
        </form>
        @foreach (var setor in Model.Setore_Segmentos_Cnaes)
        {
            <li>
                <div class="collapsible-header"><i class="material-icons">place</i>@setor.Key</div>
                <div class="collapsible-body">
                    <ul class="collapsible margin-0">
                        @foreach (var segmento in setor.Value)
                        {
                            <li>
                                <div class="collapsible-header line-normal padding-b-10 padding-t-10" title="CNAE Grupo: @segmento.Key[..2]">
                                    @segmento.Key.Remove(0, 2)
                                </div>
                                <div class="collapsible-body">
                                    <div class="row line-normal center padding-t-10 margin-b-10">
                                        <a class="segmento_click btn-link sidenav-close"
                                            data-segmento="@segmento.Key[..2]" data-descricao="@segmento.Key.Remove(0, 2)" title="CNAE Grupo: @segmento.Key[..2]">VER
                                            SEGMENTO @segmento.Key.Remove(0, 2)</a>
                                    </div>
                                    @foreach (var cnae in segmento.Value)
                                    {
                                        <p class="line-normal"><a class="cnae_click sidenav-close" data-cnae="@cnae[..7]" data-descricao="@cnae.Remove(0, 7)" title="CNAE @cnae[..7]">@cnae.Remove(0, 7)</a></p>
                                        <div class="divider"></div>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </li>
        }
</ul>

<div id="map" class="map"></div>

<script>
    var _min = 0;
    var _max = 0;
    var _arrayN = [];
    var _page_link = '';
    var _span_result = 'Setorial';
    // Criar o mapa Leaflet
    var map = L.map('map').setView([-22.902778, -48.28125], 6); // Centro inicial do mapa do estado de sp

    var info = L.control();

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
        this.update();
        return this._div;
    };

    // method that we will use to update the control based on feature properties passed
    info.update = function (props) {
        this._div.innerHTML =
            `<div class="center margin-b-10"><h6>Composição ${_span_result} no Estado de SP<h6></div>`
            + '<div class="divider"></div>'
            + (props ?
                'Município: <span class="text-uppercase">' + props.name + '</span><br />Empresas: ' + props.empresas + ' (' + _max + ') ' + '<br />Setor: ' + props.setor : 'Mova o mouse sobre o mapa');
    };

    function getColor(d) {
        const prefixo = d.substr(0, 3);
        switch (prefixo) {
            case 'Ser':
                return '#4797FF';
            case 'Com':
                return '#ffa500';
            case 'Ind':
                return '#8a2be2';
            case 'Con':
                return '#d87093';
            case 'Agr':
                return '#00E6C8';
            default:
                return '#FFEDA0';
        }
    }

    //Color for Segmento Cnae
    function getColorSC(d) {
        return d > 65000 ? '#34000f' :
            d > 21870 ? '#4d0017' :
                d > 7290 ? '#800026' :
                    d > 2430 ? '#BD0026' :
                        d > 810 ? '#E31A1C' :
                            d > 270 ? '#FC4E2A' :
                                d > 90 ? '#FD8D3C' :
                                    d > 30 ? '#FEB24C' :
                                        d > 10 ? '#FED976' :
                                            '#FFEDA0';
    }

    // Função para estilizar as áreas GeoJSON com base no valor da propriedade "empresas"
    function style(feature) {
        return {
            fillColor: getColor(`${feature.properties.setor}`),
            weight: 1,
            opacity: 1,
            color: 'black',
            //dashArray: '3',
            fillOpacity: 0.7
        };
    }

    // Função para estilizar as áreas GeoJSON com base no valor da propriedade "empresas"
    // Somente para Segmento e Cnae
    function styleSC(feature) {
        return {
            fillColor: getColorSC(`${feature.properties.empresas}`),
            weight: 1,
            opacity: 1,
            color: 'black',
            //dashArray: '3',
            fillOpacity: 0.7
        };
    }

    function zoomToFeature(e) {
        map.fitBounds(e.target.getBounds());        
    }

    function zoomToFeatureSC(e) {
        var layer = e.target;
        const url = '/setores/' + _page_link + '/' + layer.feature.properties.name;
        // Redireciona para a página interna
        location.href = url;
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 3,
            color: 'black',
            dashArray: '',
            fillOpacity: 0.7
        });

        layer.bringToFront();
        info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        //geojson.resetStyle(e.target);
        var layer = e.target;

        layer.setStyle({
            weight: 1,
            color: 'black',
            dashArray: '',
            fillOpacity: 0.7
        });
        info.update();
    }

    function onEachFeature(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature
        });
    }

    function onEachFeatureSC(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeatureSC
        });
    }

    var legend = L.control({ position: 'bottomright' });

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = ["Industria", "Comercio", "Servicos", "Construcao", "Agro"],
            labels = [];

        div.innerHTML += 'Setores<div class="divider"></div>'
        // loop through our density intervals and generate a label with a colored square for each interval
        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                grades[i] + '<br>';
        }

        return div;
    };


    // Legenda Segmento e Cnae
    var legendSC = L.control({ position: 'bottomright' });

    legendSC.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = [1, 10, 30, 90, 270, 810, 2430, 7290, 21870, 65000],
            labels = [];

        div.innerHTML += 'Empresas<div class="divider"></div>'
        // loop through our density intervals and generate a label with a colored square for each interval
        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColorSC(grades[i] + 1) + '"></i> ' +
                grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
        }

        return div;
    };

    // Adicionar uma camada base do OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    legend.addTo(map);
    info.addTo(map);

    // Função para carregar dados do IndexedDB
    function loadGeoJSONFromIndexedDB() {
        return new Promise((resolve, reject) => {
            var request = indexedDB.open('geojsonDB', 1);

            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                db.createObjectStore('geojsonStore', { keyPath: 'id' });
            };

            request.onsuccess = function (event) {
                var db = event.target.result;
                var transaction = db.transaction(['geojsonStore'], 'readonly');
                var objectStore = transaction.objectStore('geojsonStore');
                var request = objectStore.get('cachedGeoJSON');

                request.onsuccess = function (event) {
                    var cachedData = event.target.result;
                    if (cachedData) {
                        resolve(cachedData.data);
                    } else {
                        reject('Dados GeoJSON não encontrados no IndexedDB.');
                    }
                };

                request.onerror = function (event) {
                    reject('Erro ao obter dados do IndexedDB.');
                };
            };

            request.onerror = function (event) {
                reject('Erro ao abrir o IndexedDB.');
            };
        });
    }

    function goDirectAPI(_url) {
        $("#loader").show();
        $(".blackboxload").show();

        // Limpar o mapa (opcional)
        map.eachLayer(function (layer) {
            if (layer instanceof L.GeoJSON) {
                map.removeLayer(layer);
            }
        });

        // 2. Remover controles existentes
        map.removeControl(legend);

        fetch(_url)
            .then(response => response.json())
            .then(data => {

                // Processar os dados GeoJSON
                _max = data.max;
                _min = data.min;
                //_arrayN = doArrayNumerico(_max, _min, 8);
                //alert(_max + ' ' + _min);
                processDataSC(data);
            })
            .catch(error => console.error('Erro ao carregar dados GeoJSON da API:', error));
    }

    // Carregar dados GeoJSON
    loadGeoJSONFromIndexedDB()
        .then(data => {
            // Dados encontrados no IndexedDB, processar os dados
            _max = data.max;
            processData(data);
        })
        .catch(error => {
            // Dados não encontrados no IndexedDB ou erro, carregar dados da API
            fetchDataFromAPI(`@Model.UrlAPI`);
        });

    // Função para carregar dados da API
    function fetchDataFromAPI(_url) {
        fetch(_url)
            .then(response => response.json())
            .then(data => {
                // Armazenar dados no IndexedDB para uso futuro
                storeGeoJSONInIndexedDB(data);

                // Processar os dados GeoJSON
                _max = data.max;
                processData(data);
            })
            .catch(error => console.error('Erro ao carregar dados GeoJSON da API:', error));
    }

    // Função para armazenar dados no IndexedDB
    function storeGeoJSONInIndexedDB(data) {
        var request = indexedDB.open('geojsonDB', 1);

        request.onupgradeneeded = function (event) {
            var db = event.target.result;
            db.createObjectStore('geojsonStore', { keyPath: 'id' });
        };

        request.onsuccess = function (event) {
            var db = event.target.result;
            var transaction = db.transaction(['geojsonStore'], 'readwrite');
            var objectStore = transaction.objectStore('geojsonStore');
            objectStore.put({ id: 'cachedGeoJSON', data: data });
        };

        request.onerror = function (event) {
            console.error('Erro ao armazenar dados no IndexedDB.');
        };
    }

    // Função para processar os dados GeoJSON
    function processData(data) {
        $("#loader").hide();
        $(".blackboxload").fadeOut("slow");

        // Adicionar camada GeoJSON ao mapa
        var geojsonLayer = L.geoJSON(data, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);

        // Ajustar o mapa para abranger a área GeoJSON com zoom
        map.fitBounds(geojsonLayer.getBounds());
    }

    // Função para processar os dados GeoJSON
    function processDataSC(data) {
        $("#loader").hide();
        $(".blackboxload").fadeOut("slow");

        // Adicionar camada GeoJSON ao mapa
        var geojsonLayer = L.geoJSON(data, {
            style: styleSC,
            onEachFeature: onEachFeatureSC
        }).addTo(map);

        legendSC.addTo(map);

        // Ajustar o mapa para abranger a área GeoJSON com zoom
        map.fitBounds(geojsonLayer.getBounds());
    }

    function handle(e) {
        if (e.keyCode === 13) {
            var v = $(".input-search-cnae").val();
            if (v === "")
                return false;

            @* const url = '/setores/' + v;
            location.href = url; *@
            _page_link = v;
            goDirectAPI(`/api/v1/geojson/cnae/` + v);
        }
    }

    //Recebe numeros inteiro (6788) e retorna 6000;
    function FIntZero(numero) {
        // Converter o número para string
        const numeroStr = numero.toString();

        // Se o número for menor ou igual a 9, retornar o próprio número
        if (numeroStr.length <= 1) {
            return numero;
        }

        // Obter o primeiro dígito
        const primeiroDigito = numeroStr[0];

        // Criar uma string com zeros com o mesmo tamanho do número original
        const zeros = "0".repeat(numeroStr.length - 1);

        // Retornar o primeiro dígito concatenado com a string de zeros
        return parseInt(primeiroDigito + zeros);
    }

    function doArrayNumerico(vmax, vmin, numeroPartes) {
        // Validar entrada
        if (vmax < vmin) {
            throw new Error("Valor máximo deve ser maior ou igual ao valor mínimo");
        }
        if (numeroPartes <= 0) {
            throw new Error("Número de partes deve ser maior que zero");
        }

        // Calcular amplitude
        const amplitude = (vmax - vmin) / numeroPartes;

        // Criar array
        const arrayNumerico = [];
        for (let i = 0; i < numeroPartes; i++) {
            // Calcular valor da parte
            const valorParte = vmin + (i * amplitude);
            // Arredondar valor da parte para número inteiro
            const valorParteArredondado = Math.round(valorParte);
            // Adicionar valor da parte ao array
            arrayNumerico.push(valorParteArredondado);
        }

        // Retornar array
        return arrayNumerico;
    }

</script>
