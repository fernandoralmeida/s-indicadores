@page "/setores/{m}"
@model UI.Razor.Pages.Setores.MapModel

@{
    Layout = "_LayoutMap";
    ViewData["Title"] = "Penetração Setorial do Estado de SP";
    ViewData["ActivePage"] = Shared.NavPages.MapSetores;
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<div id="div-search" class="valign-wrapper">
    <input id="input-search" name="input-search" class="browser-default" type="search" placeholder="Procurar por atividade `CNAE`"
        onkeypress="handle(event)" asp-for="@Model.CNAE">
    @* <datalist id="optcities">
        @foreach (var item in Model.ListaMunicipios!.OrderBy(o => o))
        {
            <option value="@item" />
        }
    </datalist> *@
    <i class="material-icons margin-y-5">search</i>
    <partial name="_Navmap" />
</div>

<div id="map" class="map"></div>

<script>

    // Criar o mapa Leaflet
    var map = L.map('map').setView([-22.902778, -48.28125], 7); // Centro inicial do mapa do estado de sp

    var info = L.control();

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
        this.update();
        return this._div;
    };

    // method that we will use to update the control based on feature properties passed
    info.update = function (props) {
        this._div.innerHTML =
            '<div class="center margin-b-10"><h6>Composição Setorial do Estado de SP<h6></div>'
            + '<div class="divider"></div>'
            + (props ?
                'Município: <span class="text-uppercase">' + props.name + '</span><br />Empresas: ' + props.empresas + '<br />Setor: ' + props.setor : 'Mova o mouse sobre o mapa');
    };

    function getColor(d) {
        const prefixo = d.substr(0, 3);
        switch (prefixo) {
            case 'Ser':
                return '#4797FF';
            case 'Com':
                return '#ffa500';
            case 'Ind':
                return '#8a2be2';
            case 'Con':
                return '#d87093';
            case 'Agr':
                return '#00E6C8';
            default:
                return '#FFEDA0';
        }
    }

    // Função para estilizar as áreas GeoJSON com base no valor da propriedade "empresas"
    function style(feature) {
        return {
            fillColor: getColor(`${feature.properties.setor}`),
            weight: 1,
            opacity: 1,
            color: 'black',
            //dashArray: '3',
            fillOpacity: 0.5
        };
    }

    function zoomToFeature(e) {
        //map.fitBounds(e.target.getBounds());        
        var layer = e.target;
        const url = '/setores/@Model.CNAE/' + layer.feature.properties.name;
        // Redireciona para a página interna
        location.href = url;
    }

    function highlightFeature(e) {
        var layer = e.target;

        layer.setStyle({
            weight: 3,
            color: 'black',
            dashArray: '',
            fillOpacity: 0.7
        });

        layer.bringToFront();
        info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        //geojson.resetStyle(e.target);
        var layer = e.target;

        layer.setStyle({
            weight: 1,
            color: 'black',
            dashArray: '',
            fillOpacity: 0.5
        });
        info.update();
    }

    function onEachFeature(feature, layer) {
        layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            click: zoomToFeature
        });
    }

    var legend = L.control({ position: 'bottomright' });

    legend.onAdd = function (map) {

        var div = L.DomUtil.create('div', 'info legend'),
            grades = ["Industria", "Comercio", "Servicos", "Construcao", "Agro"],
            labels = [];

        div.innerHTML += 'Setores<div class="divider"></div'
        // loop through our density intervals and generate a label with a colored square for each interval
        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                grades[i] + '<br>';
        }

        return div;
    };

    // Adicionar uma camada base do OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    legend.addTo(map);
    info.addTo(map);

    // Carregar dados GeoJSON
    fetchDataFromAPI();

    // Função para carregar dados da API
    function fetchDataFromAPI() {
        fetch(`/api/v1/cnae/@Model.CNAE`)
            .then(response => response.json())
            .then(data => {

                // Processar os dados GeoJSON
                processData(data);
            })
            .catch(error => console.error('Erro ao carregar dados GeoJSON da API:', error));
    }

    // Função para processar os dados GeoJSON
    function processData(data) {
        $("#loader").hide();
        $(".blackboxload").fadeOut("slow");

        // Adicionar camada GeoJSON ao mapa
        var geojsonLayer = L.geoJSON(data, {
            style: style,
            onEachFeature: onEachFeature
        }).addTo(map);

        // Ajustar o mapa para abranger a área GeoJSON com zoom
        map.fitBounds(geojsonLayer.getBounds());
    }

    function handle(e) {
        if (e.keyCode === 13) {
            var v = $("#input-search").val();
            if (v === "")
                return false;

            const url = '/setores/' + v;
            location.href = url;
        }
    }

</script>